
XMC-LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017b0  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         00000044  20000000  0c0017b0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000004  20000044  0c0017f4  00010044  2**2
                  ALLOC
  4 .no_init      00000014  2000ffc0  2000ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 000008d8  00000000  00000000  00010048  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b11a  00000000  00000000  00010920  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e6a  00000000  00000000  0001ba3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000042a1  00000000  00000000  0001d8a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000022e8  00000000  00000000  00021b48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000057a6  00000000  00000000  00023e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000047c4  00000000  00000000  000295d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000768  00000000  00000000  0002dd9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 0000046c  00000000  00000000  0002e502  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c0017b0 	.word	0x0c0017b0
 800024c:	20000000 	.word	0x20000000
 8000250:	00000044 	.word	0x00000044
 8000254:	0c0017f4 	.word	0x0c0017f4
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c0017b0 	.word	0x0c0017b0
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c0017b0 	.word	0x0c0017b0
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000044 	.word	0x20000044
 800027c:	00000004 	.word	0x00000004
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800

	.align	1
    .thumb
 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	080016e9 	.word	0x080016e9
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	080016ad 	.word	0x080016ad

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f001 f8a7 	bl	8001418 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f001 f90f 	bl	80014ec <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f001 f8ee 	bl	80014d8 <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	60f8      	str	r0, [r7, #12]
 80003b0:	460b      	mov	r3, r1
 80003b2:	607a      	str	r2, [r7, #4]
 80003b4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	089b      	lsrs	r3, r3, #2
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	4618      	mov	r0, r3
 80003be:	7afb      	ldrb	r3, [r7, #11]
 80003c0:	089b      	lsrs	r3, r3, #2
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	461a      	mov	r2, r3
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	3204      	adds	r2, #4
 80003ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003ce:	7afb      	ldrb	r3, [r7, #11]
 80003d0:	f003 0303 	and.w	r3, r3, #3
 80003d4:	00db      	lsls	r3, r3, #3
 80003d6:	4619      	mov	r1, r3
 80003d8:	23f8      	movs	r3, #248	; 0xf8
 80003da:	408b      	lsls	r3, r1
 80003dc:	43db      	mvns	r3, r3
 80003de:	ea02 0103 	and.w	r1, r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	1d02      	adds	r2, r0, #4
 80003e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003ee:	7afb      	ldrb	r3, [r7, #11]
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	4619      	mov	r1, r3
 80003f4:	2303      	movs	r3, #3
 80003f6:	408b      	lsls	r3, r1
 80003f8:	43db      	mvns	r3, r3
 80003fa:	401a      	ands	r2, r3
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	4a3a      	ldr	r2, [pc, #232]	; (80004ec <XMC_GPIO_Init+0x144>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d003      	beq.n	8000410 <XMC_GPIO_Init+0x68>
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	4a39      	ldr	r2, [pc, #228]	; (80004f0 <XMC_GPIO_Init+0x148>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d10a      	bne.n	8000426 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000414:	7afb      	ldrb	r3, [r7, #11]
 8000416:	2101      	movs	r1, #1
 8000418:	fa01 f303 	lsl.w	r3, r1, r3
 800041c:	43db      	mvns	r3, r3
 800041e:	401a      	ands	r2, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	661a      	str	r2, [r3, #96]	; 0x60
 8000424:	e042      	b.n	80004ac <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	b2db      	uxtb	r3, r3
 800042c:	b25b      	sxtb	r3, r3
 800042e:	2b00      	cmp	r3, #0
 8000430:	da3c      	bge.n	80004ac <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	685a      	ldr	r2, [r3, #4]
 8000436:	7afb      	ldrb	r3, [r7, #11]
 8000438:	409a      	lsls	r2, r3
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800043e:	7afb      	ldrb	r3, [r7, #11]
 8000440:	08db      	lsrs	r3, r3, #3
 8000442:	b2db      	uxtb	r3, r3
 8000444:	4618      	mov	r0, r3
 8000446:	7afb      	ldrb	r3, [r7, #11]
 8000448:	08db      	lsrs	r3, r3, #3
 800044a:	b2db      	uxtb	r3, r3
 800044c:	461a      	mov	r2, r3
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	3210      	adds	r2, #16
 8000452:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000456:	7afb      	ldrb	r3, [r7, #11]
 8000458:	f003 0307 	and.w	r3, r3, #7
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	4619      	mov	r1, r3
 8000460:	2307      	movs	r3, #7
 8000462:	408b      	lsls	r3, r1
 8000464:	43db      	mvns	r3, r3
 8000466:	ea02 0103 	and.w	r1, r2, r3
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	f100 0210 	add.w	r2, r0, #16
 8000470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000474:	7afb      	ldrb	r3, [r7, #11]
 8000476:	08db      	lsrs	r3, r3, #3
 8000478:	b2db      	uxtb	r3, r3
 800047a:	4618      	mov	r0, r3
 800047c:	7afb      	ldrb	r3, [r7, #11]
 800047e:	08db      	lsrs	r3, r3, #3
 8000480:	b2db      	uxtb	r3, r3
 8000482:	461a      	mov	r2, r3
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	3210      	adds	r2, #16
 8000488:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	7a1b      	ldrb	r3, [r3, #8]
 8000490:	4619      	mov	r1, r3
 8000492:	7afb      	ldrb	r3, [r7, #11]
 8000494:	f003 0307 	and.w	r3, r3, #7
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	fa01 f303 	lsl.w	r3, r1, r3
 800049e:	ea42 0103 	orr.w	r1, r2, r3
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	f100 0210 	add.w	r2, r0, #16
 80004a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004ac:	7afb      	ldrb	r3, [r7, #11]
 80004ae:	089b      	lsrs	r3, r3, #2
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	4618      	mov	r0, r3
 80004b4:	7afb      	ldrb	r3, [r7, #11]
 80004b6:	089b      	lsrs	r3, r3, #2
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	461a      	mov	r2, r3
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	3204      	adds	r2, #4
 80004c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	4619      	mov	r1, r3
 80004ca:	7afb      	ldrb	r3, [r7, #11]
 80004cc:	f003 0303 	and.w	r3, r3, #3
 80004d0:	00db      	lsls	r3, r3, #3
 80004d2:	fa01 f303 	lsl.w	r3, r1, r3
 80004d6:	ea42 0103 	orr.w	r1, r2, r3
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	1d02      	adds	r2, r0, #4
 80004de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004e2:	3714      	adds	r7, #20
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	48028e00 	.word	0x48028e00
 80004f0:	48028f00 	.word	0x48028f00

080004f4 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <XMC_SCU_GetMirrorStatus+0x14>)
 80004fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80004fe:	4618      	mov	r0, r3
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	50004000 	.word	0x50004000

0800050c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000514:	f7ff fede 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <XMC_SCU_lDelay+0x3c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0b      	ldr	r2, [pc, #44]	; (800054c <XMC_SCU_lDelay+0x40>)
 800051e:	fba2 2303 	umull	r2, r3, r2, r3
 8000522:	0c9a      	lsrs	r2, r3, #18
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	fb02 f303 	mul.w	r3, r2, r3
 800052a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e003      	b.n	800053a <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8000532:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	3301      	adds	r3, #1
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	429a      	cmp	r2, r3
 8000540:	d3f7      	bcc.n	8000532 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	2000ffc0 	.word	0x2000ffc0
 800054c:	431bde83 	.word	0x431bde83

08000550 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8000556:	685b      	ldr	r3, [r3, #4]
}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	50004074 	.word	0x50004074

08000568 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000570:	4a03      	ldr	r2, [pc, #12]	; (8000580 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60d3      	str	r3, [r2, #12]
}
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	50004074 	.word	0x50004074

08000584 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000584:	b5b0      	push	{r4, r5, r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af02      	add	r7, sp, #8
 800058a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f88b 	bl	80006a8 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000592:	f000 fa1d 	bl	80009d0 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	79db      	ldrb	r3, [r3, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d00a      	beq.n	80005b4 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800059e:	f000 fa55 	bl	8000a4c <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80005a2:	bf00      	nop
 80005a4:	f000 fa40 	bl	8000a28 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80005a8:	4603      	mov	r3, r0
 80005aa:	f083 0301 	eor.w	r3, r3, #1
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1f7      	bne.n	80005a4 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	7a5b      	ldrb	r3, [r3, #9]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f8ef 	bl	800079c <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005be:	bf00      	nop
 80005c0:	f7ff ff98 	bl	80004f4 <XMC_SCU_GetMirrorStatus>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1fa      	bne.n	80005c0 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	7a1b      	ldrb	r3, [r3, #8]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 f9d8 	bl	8000984 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	7c1b      	ldrb	r3, [r3, #16]
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f8fd 	bl	80007d8 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	7c5b      	ldrb	r3, [r3, #17]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f920 	bl	8000828 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7c9b      	ldrb	r3, [r3, #18]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f907 	bl	8000800 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7cdb      	ldrb	r3, [r3, #19]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f92a 	bl	8000850 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	799b      	ldrb	r3, [r3, #6]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00a      	beq.n	800061a <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000604:	f000 fa5a 	bl	8000abc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000608:	bf00      	nop
 800060a:	f000 fa7f 	bl	8000b0c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 800060e:	4603      	mov	r3, r0
 8000610:	f083 0301 	eor.w	r3, r3, #1
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1f7      	bne.n	800060a <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	78db      	ldrb	r3, [r3, #3]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d102      	bne.n	8000628 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8000622:	f000 fa97 	bl	8000b54 <XMC_SCU_CLOCK_DisableSystemPll>
 8000626:	e014      	b.n	8000652 <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000628:	f000 fa84 	bl	8000b34 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	8899      	ldrh	r1, [r3, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000638:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800063e:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	4608      	mov	r0, r1
 8000648:	4611      	mov	r1, r2
 800064a:	462a      	mov	r2, r5
 800064c:	4623      	mov	r3, r4
 800064e:	f000 fa91 	bl	8000b74 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	68db      	ldr	r3, [r3, #12]
 8000656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800065a:	d103      	bne.n	8000664 <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 800065c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000660:	f000 f822 	bl	80006a8 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000664:	f7ff fe36 	bl	80002d4 <SystemCoreClockUpdate>
}
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bdb0      	pop	{r4, r5, r7, pc}
 800066e:	bf00      	nop

08000670 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	0f1b      	lsrs	r3, r3, #28
 800067c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000684:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	4613      	mov	r3, r2
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	4413      	add	r3, r2
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	461a      	mov	r2, r3
 8000692:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8000694:	4413      	add	r3, r2
 8000696:	68ba      	ldr	r2, [r7, #8]
 8000698:	601a      	str	r2, [r3, #0]
}
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	50004414 	.word	0x50004414

080006a8 <XMC_SCU_CLOCK_SetSystemClockSource>:
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006b0:	4906      	ldr	r1, [pc, #24]	; (80006cc <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4313      	orrs	r3, r2
 80006be:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	50004600 	.word	0x50004600

080006d0 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80006d8:	4906      	ldr	r1, [pc, #24]	; (80006f4 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4313      	orrs	r3, r2
 80006e6:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	50004600 	.word	0x50004600

080006f8 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000700:	4906      	ldr	r1, [pc, #24]	; (800071c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000706:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4313      	orrs	r3, r2
 800070e:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	50004600 	.word	0x50004600

08000720 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d108      	bne.n	8000742 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000730:	4a0a      	ldr	r2, [pc, #40]	; (800075c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000732:	4b0a      	ldr	r3, [pc, #40]	; (800075c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800073a:	f023 0301 	bic.w	r3, r3, #1
 800073e:	60d3      	str	r3, [r2, #12]
 8000740:	e007      	b.n	8000752 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000742:	4a06      	ldr	r2, [pc, #24]	; (800075c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	60d3      	str	r3, [r2, #12]
  }
}
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	50004710 	.word	0x50004710

08000760 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800076a:	bf00      	nop
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 800076e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000772:	f003 0308 	and.w	r3, r3, #8
 8000776:	2b00      	cmp	r3, #0
 8000778:	d1f8      	bne.n	800076c <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800077a:	4907      	ldr	r1, [pc, #28]	; (8000798 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000784:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000786:	4313      	orrs	r3, r2
 8000788:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	50004000 	.word	0x50004000
 8000798:	50004300 	.word	0x50004300

0800079c <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007a6:	bf00      	nop
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80007aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1f8      	bne.n	80007a8 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007b6:	4907      	ldr	r1, [pc, #28]	; (80007d4 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80007c0:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007c2:	4313      	orrs	r3, r2
 80007c4:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	50004000 	.word	0x50004000
 80007d4:	50004300 	.word	0x50004300

080007d8 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007e0:	4906      	ldr	r1, [pc, #24]	; (80007fc <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007ee:	4313      	orrs	r3, r2
 80007f0:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	50004600 	.word	0x50004600

08000800 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000808:	4906      	ldr	r1, [pc, #24]	; (8000824 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800080c:	6a1b      	ldr	r3, [r3, #32]
 800080e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000816:	4313      	orrs	r3, r2
 8000818:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	50004600 	.word	0x50004600

08000828 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000830:	4906      	ldr	r1, [pc, #24]	; (800084c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000834:	691b      	ldr	r3, [r3, #16]
 8000836:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800083e:	4313      	orrs	r3, r2
 8000840:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	50004600 	.word	0x50004600

08000850 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000858:	4906      	ldr	r1, [pc, #24]	; (8000874 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000866:	4313      	orrs	r3, r2
 8000868:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	50004600 	.word	0x50004600

08000878 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000880:	4906      	ldr	r1, [pc, #24]	; (800089c <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800088e:	4313      	orrs	r3, r2
 8000890:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	50004600 	.word	0x50004600

080008a0 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008a8:	4906      	ldr	r1, [pc, #24]	; (80008c4 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008b6:	4313      	orrs	r3, r2
 80008b8:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	50004600 	.word	0x50004600

080008c8 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008d0:	4906      	ldr	r1, [pc, #24]	; (80008ec <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008de:	4313      	orrs	r3, r2
 80008e0:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	50004600 	.word	0x50004600

080008f0 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80008fa:	4a04      	ldr	r2, [pc, #16]	; (800090c <XMC_SCU_CLOCK_EnableClock+0x1c>)
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	6053      	str	r3, [r2, #4]
}
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	50004600 	.word	0x50004600

08000910 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 800091a:	4a19      	ldr	r2, [pc, #100]	; (8000980 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800091c:	4b18      	ldr	r3, [pc, #96]	; (8000980 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000926:	4a16      	ldr	r2, [pc, #88]	; (8000980 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000928:	4b15      	ldr	r3, [pc, #84]	; (8000980 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	f043 0310 	orr.w	r3, r3, #16
 8000930:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000932:	4913      	ldr	r1, [pc, #76]	; (8000980 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	3b01      	subs	r3, #1
 8000938:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3b01      	subs	r3, #1
 800093e:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000940:	4313      	orrs	r3, r2
 8000942:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000944:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800094e:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000950:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	f023 0310 	bic.w	r3, r3, #16
 800095a:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 800095c:	4a08      	ldr	r2, [pc, #32]	; (8000980 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000966:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000968:	bf00      	nop
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800096c:	691b      	ldr	r3, [r3, #16]
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	2b00      	cmp	r3, #0
 8000974:	d0f9      	beq.n	800096a <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	50004710 	.word	0x50004710

08000984 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 800098e:	4a0f      	ldr	r2, [pc, #60]	; (80009cc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000998:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d10e      	bne.n	80009be <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80009a0:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80009aa:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80009ac:	2064      	movs	r0, #100	; 0x64
 80009ae:	f7ff fdad 	bl	800050c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80009b2:	4a06      	ldr	r2, [pc, #24]	; (80009cc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009bc:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 80009be:	2064      	movs	r0, #100	; 0x64
 80009c0:	f7ff fda4 	bl	800050c <XMC_SCU_lDelay>
}
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	50004710 	.word	0x50004710

080009d0 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d109      	bne.n	80009f4 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009e6:	bf00      	nop
 80009e8:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d0f9      	beq.n	80009e8 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80009f4:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d00a      	beq.n	8000a16 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a06:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000a08:	bf00      	nop
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d1f9      	bne.n	8000a0a <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	50004200 	.word	0x50004200
 8000a24:	50004400 	.word	0x50004400

08000a28 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f003 0308 	and.w	r3, r3, #8
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	bf0c      	ite	eq
 8000a38:	2301      	moveq	r3, #1
 8000a3a:	2300      	movne	r3, #0
 8000a3c:	b2db      	uxtb	r3, r3
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	50004300 	.word	0x50004300

08000a4c <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000a50:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000a54:	f7ff fd88 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000a58:	4a17      	ldr	r2, [pc, #92]	; (8000ab8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a62:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000a64:	bf00      	nop
 8000a66:	f7ff fd73 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d0f8      	beq.n	8000a66 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000a74:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a78:	f7ff fd76 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a7e:	2208      	movs	r2, #8
 8000a80:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000a82:	bf00      	nop
 8000a84:	f7ff fd64 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d0f8      	beq.n	8000a84 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000a92:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000a96:	f7ff fd67 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000a9a:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	f043 0308 	orr.w	r3, r3, #8
 8000aa4:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000aa6:	bf00      	nop
 8000aa8:	f7ff fd52 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000aac:	4603      	mov	r3, r0
 8000aae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d0f8      	beq.n	8000aa8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	50004300 	.word	0x50004300

08000abc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000abc:	b5b0      	push	{r4, r5, r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000ac0:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aca:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000acc:	4d0d      	ldr	r5, [pc, #52]	; (8000b04 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000ad6:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000ada:	f000 fcfd 	bl	80014d8 <OSCHP_GetFrequency>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8000ae6:	0d1b      	lsrs	r3, r3, #20
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000aec:	4323      	orrs	r3, r4
 8000aee:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000af0:	4a03      	ldr	r2, [pc, #12]	; (8000b00 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000af2:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000afa:	6053      	str	r3, [r2, #4]
}
 8000afc:	bdb0      	pop	{r4, r5, r7, pc}
 8000afe:	bf00      	nop
 8000b00:	50004710 	.word	0x50004710
 8000b04:	50004700 	.word	0x50004700
 8000b08:	6b5fca6b 	.word	0x6b5fca6b

08000b0c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000b18:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000b1c:	bf0c      	ite	eq
 8000b1e:	2301      	moveq	r3, #1
 8000b20:	2300      	movne	r3, #0
 8000b22:	b2db      	uxtb	r3, r3
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	50004710 	.word	0x50004710

08000b34 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b38:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b3a:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b42:	f023 0302 	bic.w	r3, r3, #2
 8000b46:	6053      	str	r3, [r2, #4]
}
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	50004710 	.word	0x50004710

08000b54 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b58:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b62:	f043 0302 	orr.w	r3, r3, #2
 8000b66:	6053      	str	r3, [r2, #4]
}
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	50004710 	.word	0x50004710

08000b74 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60ba      	str	r2, [r7, #8]
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4603      	mov	r3, r0
 8000b80:	81fb      	strh	r3, [r7, #14]
 8000b82:	460b      	mov	r3, r1
 8000b84:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000b86:	89fb      	ldrh	r3, [r7, #14]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fdc9 	bl	8000720 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000b8e:	7b7b      	ldrb	r3, [r7, #13]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	f040 8084 	bne.w	8000c9e <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000b96:	89fb      	ldrh	r3, [r7, #14]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d109      	bne.n	8000bb0 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000b9c:	f000 fc9c 	bl	80014d8 <OSCHP_GetFrequency>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	4b4b      	ldr	r3, [pc, #300]	; (8000cd0 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000ba4:	fba3 2302 	umull	r2, r3, r3, r2
 8000ba8:	0c9b      	lsrs	r3, r3, #18
 8000baa:	059b      	lsls	r3, r3, #22
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	e002      	b.n	8000bb6 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000bb0:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000bb4:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	fb02 f203 	mul.w	r2, r2, r3
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc4:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	4a42      	ldr	r2, [pc, #264]	; (8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000bca:	fba2 2303 	umull	r2, r3, r2, r3
 8000bce:	091b      	lsrs	r3, r3, #4
 8000bd0:	0d9b      	lsrs	r3, r3, #22
 8000bd2:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000bd4:	4a40      	ldr	r2, [pc, #256]	; (8000cd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bd6:	4b40      	ldr	r3, [pc, #256]	; (8000cd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000be0:	4a3d      	ldr	r2, [pc, #244]	; (8000cd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000be2:	4b3d      	ldr	r3, [pc, #244]	; (8000cd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f043 0310 	orr.w	r3, r3, #16
 8000bea:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000bec:	493a      	ldr	r1, [pc, #232]	; (8000cd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bee:	4b3a      	ldr	r3, [pc, #232]	; (8000cd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bf0:	689a      	ldr	r2, [r3, #8]
 8000bf2:	4b3a      	ldr	r3, [pc, #232]	; (8000cdc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000bf4:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	0212      	lsls	r2, r2, #8
 8000bfc:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	3b01      	subs	r3, #1
 8000c02:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c04:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000c10:	4a31      	ldr	r2, [pc, #196]	; (8000cd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c12:	4b31      	ldr	r3, [pc, #196]	; (8000cd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c1a:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c1c:	4a2e      	ldr	r2, [pc, #184]	; (8000cd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c1e:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f023 0310 	bic.w	r3, r3, #16
 8000c26:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000c28:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c2a:	4b2b      	ldr	r3, [pc, #172]	; (8000cd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c32:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000c34:	bf00      	nop
 8000c36:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f003 0304 	and.w	r3, r3, #4
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d0f9      	beq.n	8000c36 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c42:	4a25      	ldr	r2, [pc, #148]	; (8000cd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c44:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f023 0301 	bic.w	r3, r3, #1
 8000c4c:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000c4e:	bf00      	nop
 8000c50:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d1f9      	bne.n	8000c50 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	4a20      	ldr	r2, [pc, #128]	; (8000ce0 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000c60:	fba2 2303 	umull	r2, r3, r2, r3
 8000c64:	095b      	lsrs	r3, r3, #5
 8000c66:	0d9b      	lsrs	r3, r3, #22
 8000c68:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c6a:	6a3a      	ldr	r2, [r7, #32]
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d202      	bcs.n	8000c78 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c72:	6938      	ldr	r0, [r7, #16]
 8000c74:	f000 f838 	bl	8000ce8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	085b      	lsrs	r3, r3, #1
 8000c7c:	4a19      	ldr	r2, [pc, #100]	; (8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c82:	095b      	lsrs	r3, r3, #5
 8000c84:	0d9b      	lsrs	r3, r3, #22
 8000c86:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c88:	6a3a      	ldr	r2, [r7, #32]
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d202      	bcs.n	8000c96 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c90:	6938      	ldr	r0, [r7, #16]
 8000c92:	f000 f829 	bl	8000ce8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000c96:	6a38      	ldr	r0, [r7, #32]
 8000c98:	f000 f826 	bl	8000ce8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000c9c:	e015      	b.n	8000cca <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000c9e:	490e      	ldr	r1, [pc, #56]	; (8000cd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000ca8:	6a3b      	ldr	r3, [r7, #32]
 8000caa:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000cac:	4313      	orrs	r3, r2
 8000cae:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000cb0:	4a09      	ldr	r2, [pc, #36]	; (8000cd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000cbc:	bf00      	nop
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d0f9      	beq.n	8000cbe <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	431bde83 	.word	0x431bde83
 8000cd4:	aaaaaaab 	.word	0xaaaaaaab
 8000cd8:	50004710 	.word	0x50004710
 8000cdc:	f08080ff 	.word	0xf08080ff
 8000ce0:	88888889 	.word	0x88888889
 8000ce4:	b60b60b7 	.word	0xb60b60b7

08000ce8 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000cf0:	4907      	ldr	r1, [pc, #28]	; (8000d10 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d00:	4313      	orrs	r3, r2
 8000d02:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000d04:	2032      	movs	r0, #50	; 0x32
 8000d06:	f7ff fc01 	bl	800050c <XMC_SCU_lDelay>
}
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	50004710 	.word	0x50004710

08000d14 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d22:	60da      	str	r2, [r3, #12]
}
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop

08000d30 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <XMC_CCU4_lDeassertReset+0x4c>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d103      	bne.n	8000d48 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000d40:	2004      	movs	r0, #4
 8000d42:	f7ff fc95 	bl	8000670 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d46:	e016      	b.n	8000d76 <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <XMC_CCU4_lDeassertReset+0x50>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d103      	bne.n	8000d58 <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000d50:	2008      	movs	r0, #8
 8000d52:	f7ff fc8d 	bl	8000670 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d56:	e00e      	b.n	8000d76 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <XMC_CCU4_lDeassertReset+0x54>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d103      	bne.n	8000d68 <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8000d60:	2010      	movs	r0, #16
 8000d62:	f7ff fc85 	bl	8000670 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d66:	e006      	b.n	8000d76 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <XMC_CCU4_lDeassertReset+0x58>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d102      	bne.n	8000d76 <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000d70:	4806      	ldr	r0, [pc, #24]	; (8000d8c <XMC_CCU4_lDeassertReset+0x5c>)
 8000d72:	f7ff fc7d 	bl	8000670 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	4000c000 	.word	0x4000c000
 8000d80:	40010000 	.word	0x40010000
 8000d84:	40014000 	.word	0x40014000
 8000d88:	48004000 	.word	0x48004000
 8000d8c:	10000001 	.word	0x10000001

08000d90 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000d98:	2010      	movs	r0, #16
 8000d9a:	f7ff fda9 	bl	80008f0 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff ffc6 	bl	8000d30 <XMC_CCU4_lDeassertReset>
#endif
}
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop

08000dac <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ffe9 	bl	8000d90 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ffa8 	bl	8000d14 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dd0:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000dd2:	78fb      	ldrb	r3, [r7, #3]
 8000dd4:	039b      	lsls	r3, r3, #14
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	601a      	str	r2, [r3, #0]
}
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	795b      	ldrb	r3, [r3, #5]
 8000dfe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	051a      	lsls	r2, r3, #20
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	791b      	ldrb	r3, [r3, #4]
 8000e0e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	461a      	mov	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	795b      	ldrb	r3, [r3, #5]
 8000e1e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	461a      	mov	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	795b      	ldrb	r3, [r3, #5]
 8000e2e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	461a      	mov	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	791b      	ldrb	r3, [r3, #4]
 8000e3e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	461a      	mov	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b087      	sub	sp, #28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	70fb      	strb	r3, [r7, #3]
 8000e60:	4613      	mov	r3, r2
 8000e62:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000e6a:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	2b09      	cmp	r3, #9
 8000e70:	d82c      	bhi.n	8000ecc <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 8000e72:	a201      	add	r2, pc, #4	; (adr r2, 8000e78 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8000e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e78:	08000ea1 	.word	0x08000ea1
 8000e7c:	08000ea1 	.word	0x08000ea1
 8000e80:	08000eab 	.word	0x08000eab
 8000e84:	08000eab 	.word	0x08000eab
 8000e88:	08000ecd 	.word	0x08000ecd
 8000e8c:	08000ecd 	.word	0x08000ecd
 8000e90:	08000ecd 	.word	0x08000ecd
 8000e94:	08000ecd 	.word	0x08000ecd
 8000e98:	08000eb5 	.word	0x08000eb5
 8000e9c:	08000ec1 	.word	0x08000ec1
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
      break;
 8000ea8:	e016      	b.n	8000ed8 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8000eaa:	230c      	movs	r3, #12
 8000eac:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	617b      	str	r3, [r7, #20]
      break;
 8000eb2:	e011      	b.n	8000ed8 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8000eb4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eb8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8000eba:	2308      	movs	r3, #8
 8000ebc:	617b      	str	r3, [r7, #20]
      break;
 8000ebe:	e00b      	b.n	8000ed8 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8000ec0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ec4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8000ec6:	230a      	movs	r3, #10
 8000ec8:	617b      	str	r3, [r7, #20]
      break;
 8000eca:	e005      	b.n	8000ed8 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8000ecc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ed0:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8000ed2:	230c      	movs	r3, #12
 8000ed4:	617b      	str	r3, [r7, #20]
      break;
 8000ed6:	bf00      	nop
  }
  
  srs &= ~mask; 
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8000ee2:	78ba      	ldrb	r2, [r7, #2]
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8000ef8:	371c      	adds	r7, #28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	70fb      	strb	r3, [r7, #3]
 8000f10:	4613      	mov	r3, r2
 8000f12:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000f18:	78fb      	ldrb	r3, [r7, #3]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	2303      	movs	r3, #3
 8000f20:	408b      	lsls	r3, r1
 8000f22:	43db      	mvns	r3, r3
 8000f24:	401a      	ands	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000f2e:	78bb      	ldrb	r3, [r7, #2]
 8000f30:	78f9      	ldrb	r1, [r7, #3]
 8000f32:	0049      	lsls	r1, r1, #1
 8000f34:	408b      	lsls	r3, r1
 8000f36:	431a      	orrs	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <_init>:
  }
}

/* Init */
void _init(void)
{}
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 8000f60:	78fb      	ldrb	r3, [r7, #3]
 8000f62:	2201      	movs	r2, #1
 8000f64:	409a      	lsls	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	60da      	str	r2, [r3, #12]
}
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	60da      	str	r2, [r3, #12]
}
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8000f98:	887a      	ldrh	r2, [r7, #2]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8000fb4:	887a      	ldrh	r2, [r7, #2]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	611a      	str	r2, [r3, #16]
}
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8000ff2:	78fb      	ldrb	r3, [r7, #3]
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <PWM_lCCU4_Init>:

#ifdef PWM_SLICE_USED_CCU4

/*Initialize the APP and CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_Init(PWM_t *const handle_ptr)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status = PWM_STATUS_FAILURE;
 8001014:	2301      	movs	r3, #1
 8001016:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_lCCU4_Init:Invalid handle_ptr" , (handle_ptr != NULL))

  if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800101e:	2b02      	cmp	r3, #2
 8001020:	d14d      	bne.n	80010be <PWM_lCCU4_Init+0xb2>
  {
    /* Initialize consumed Apps */
    status = (PWM_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handle);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f992 	bl	8001350 <GLOBAL_CCU4_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	73fb      	strb	r3, [r7, #15]

    /*Initialize CCU4 slice */
    if (PWM_STATUS_SUCCESS == status)/*check GLOBAL_CCU4_Init status*/
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d13f      	bne.n	80010b6 <PWM_lCCU4_Init+0xaa>
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	4610      	mov	r0, r2
 8001040:	4619      	mov	r1, r3
 8001042:	f7ff fed1 	bl	8000de8 <XMC_CCU4_SLICE_CompareInit>

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689a      	ldr	r2, [r3, #8]
    		                             (uint16_t)handle_ptr->period_value);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69db      	ldr	r3, [r3, #28]
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 800104e:	b29b      	uxth	r3, r3
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f7ff ff9a 	bl	8000f8c <XMC_CCU4_SLICE_SetTimerPeriodMatch>
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689a      	ldr	r2, [r3, #8]
    		                              (uint16_t)handle_ptr->compare_value);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	699b      	ldr	r3, [r3, #24]

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 8001060:	b29b      	uxth	r3, r3
 8001062:	4610      	mov	r0, r2
 8001064:	4619      	mov	r1, r3
 8001066:	f7ff ff9f 	bl	8000fa8 <XMC_CCU4_SLICE_SetTimerCompareMatch>
    		                              (uint16_t)handle_ptr->compare_value);

      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001072:	4610      	mov	r0, r2
 8001074:	4619      	mov	r1, r3
 8001076:	f7ff ffa5 	bl	8000fc4 <XMC_CCU4_EnableShadowTransfer>

      /* Initialize interrupts */
      PWM_lCCU4_ConfigInterrupts(handle_ptr);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 f824 	bl	80010c8 <PWM_lCCU4_ConfigInterrupts>

      XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6919      	ldr	r1, [r3, #16]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	4608      	mov	r0, r1
 8001090:	4611      	mov	r1, r2
 8001092:	461a      	mov	r2, r3
 8001094:	f7ff f988 	bl	80003a8 <XMC_GPIO_Init>
    		        handle_ptr->gpio_out_config);

      handle_ptr->state = PWM_STATUS_SUCCESS;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->start_control)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d002      	beq.n	80010b0 <PWM_lCCU4_Init+0xa4>
      {
        PWM_Start(handle_ptr);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f000 f878 	bl	80011a0 <PWM_Start>
      }
      status = PWM_STATUS_SUCCESS;
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]
 80010b4:	e003      	b.n	80010be <PWM_lCCU4_Init+0xb2>
    }
    else
    {
      handle_ptr->state = PWM_STATUS_UNINITIALIZED;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2202      	movs	r2, #2
 80010ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }

  }
  return (status);
 80010be:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_lCCU4_Init() api */
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <PWM_lCCU4_ConfigInterrupts>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialize interrupts */
void PWM_lCCU4_ConfigInterrupts(PWM_t *const handle_ptr)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->period_match_enable)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00f      	beq.n	80010fa <PWM_lCCU4_ConfigInterrupts+0x32>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:period match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	4618      	mov	r0, r3
 80010e0:	2100      	movs	r1, #0
 80010e2:	f7ff ff7d 	bl	8000fe0 <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to period match event*/
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80010f0:	4610      	mov	r0, r2
 80010f2:	2100      	movs	r1, #0
 80010f4:	461a      	mov	r2, r3
 80010f6:	f7ff fead 	bl	8000e54 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_period_match_node);
  }

  if ((bool) true == handle_ptr->compare_match_enable)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00f      	beq.n	8001124 <PWM_lCCU4_ConfigInterrupts+0x5c>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:compare match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	4618      	mov	r0, r3
 800110a:	2102      	movs	r1, #2
 800110c:	f7ff ff68 	bl	8000fe0 <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to compare match event */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800111a:	4610      	mov	r0, r2
 800111c:	2102      	movs	r1, #2
 800111e:	461a      	mov	r2, r3
 8001120:	f7ff fe98 	bl	8000e54 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_compare_match_node);
  }
}
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop

0800112c <PWM_lCCU4_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Starts the CCU4 slice. */
void PWM_lCCU4_Start(PWM_t *const handle_ptr)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if ((PWM_STATUS_SUCCESS == handle_ptr->state) || (PWM_STATUS_STOPPED == handle_ptr->state))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800113a:	2b00      	cmp	r3, #0
 800113c:	d004      	beq.n	8001148 <PWM_lCCU4_Start+0x1c>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001144:	2b04      	cmp	r3, #4
 8001146:	d111      	bne.n	800116c <PWM_lCCU4_Start+0x40>
  {
    /* Clears the IDLE mode for the slice */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_kernel_ptr,handle_ptr->slice_number);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001152:	4610      	mov	r0, r2
 8001154:	4619      	mov	r1, r3
 8001156:	f7ff fefd 	bl	8000f54 <XMC_CCU4_EnableClock>
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff08 	bl	8000f74 <XMC_CCU4_SLICE_StartTimer>

    handle_ptr->state = PWM_STATUS_RUNNING;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2203      	movs	r2, #3
 8001168:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    XMC_DEBUG("PWM_lCCU4_Start:start PWM")
  }
} /* end of PWM_lCCU4_Start() api */
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop

08001174 <PWM_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function initializes the app */
PWM_STATUS_t PWM_Init(PWM_t *const handle_ptr)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 800117c:	2301      	movs	r3, #1
 800117e:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_Init:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001186:	2b00      	cmp	r3, #0
 8001188:	d104      	bne.n	8001194 <PWM_Init+0x20>
  {
    status = PWM_lCCU4_Init(handle_ptr);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ff3e 	bl	800100c <PWM_lCCU4_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	73fb      	strb	r3, [r7, #15]
  {
    status = PWM_lCCU8_Init(handle_ptr);
  }
#endif

  return (status);
 8001194:	7bfb      	ldrb	r3, [r7, #15]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop

080011a0 <PWM_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function starts the PWM generation. This needs to be called even if external start is configured.*/
void PWM_Start(PWM_t *const handle_ptr)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_Start:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d102      	bne.n	80011b8 <PWM_Start+0x18>
  {
    PWM_lCCU4_Start(handle_ptr);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ffba 	bl	800112c <PWM_lCCU4_Start>
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
  {
    PWM_lCCU8_Start(handle_ptr);
  }
#endif
}
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop

080011c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <__NVIC_GetPriorityGrouping+0x18>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80011cc:	0a1b      	lsrs	r3, r3, #8
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	db0b      	blt.n	8001206 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ee:	4908      	ldr	r1, [pc, #32]	; (8001210 <__NVIC_EnableIRQ+0x34>)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	095b      	lsrs	r3, r3, #5
 80011f6:	79fa      	ldrb	r2, [r7, #7]
 80011f8:	f002 021f 	and.w	r2, r2, #31
 80011fc:	2001      	movs	r0, #1
 80011fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100

08001214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	2b00      	cmp	r3, #0
 8001226:	db0a      	blt.n	800123e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001228:	490d      	ldr	r1, [pc, #52]	; (8001260 <__NVIC_SetPriority+0x4c>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	440b      	add	r3, r1
 8001238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800123c:	e00a      	b.n	8001254 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123e:	4909      	ldr	r1, [pc, #36]	; (8001264 <__NVIC_SetPriority+0x50>)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	3b04      	subs	r3, #4
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	0092      	lsls	r2, r2, #2
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	440b      	add	r3, r1
 8001252:	761a      	strb	r2, [r3, #24]
  }
}
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000e100 	.word	0xe000e100
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001268:	b480      	push	{r7}
 800126a:	b089      	sub	sp, #36	; 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f1c3 0307 	rsb	r3, r3, #7
 8001282:	2b06      	cmp	r3, #6
 8001284:	bf28      	it	cs
 8001286:	2306      	movcs	r3, #6
 8001288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3306      	adds	r3, #6
 800128e:	2b06      	cmp	r3, #6
 8001290:	d902      	bls.n	8001298 <NVIC_EncodePriority+0x30>
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3b01      	subs	r3, #1
 8001296:	e000      	b.n	800129a <NVIC_EncodePriority+0x32>
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	2201      	movs	r2, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	1e5a      	subs	r2, r3, #1
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	401a      	ands	r2, r3
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	2101      	movs	r1, #1
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	1e59      	subs	r1, r3, #1
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80012bc:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3724      	adds	r7, #36	; 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop

080012cc <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff ff7e 	bl	80011dc <__NVIC_EnableIRQ>
}
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop

080012e8 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	781c      	ldrb	r4, [r3, #0]
 80012f4:	f7ff ff64 	bl	80011c0 <__NVIC_GetPriorityGrouping>
 80012f8:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80012fe:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8001304:	4608      	mov	r0, r1
 8001306:	4611      	mov	r1, r2
 8001308:	461a      	mov	r2, r3
 800130a:	f7ff ffad 	bl	8001268 <NVIC_EncodePriority>
 800130e:	4602      	mov	r2, r0
 8001310:	b263      	sxtb	r3, r4
 8001312:	4618      	mov	r0, r3
 8001314:	4611      	mov	r1, r2
 8001316:	f7ff ff7d 	bl	8001214 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	78db      	ldrb	r3, [r3, #3]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d002      	beq.n	8001328 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffd2 	bl	80012cc <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	bd90      	pop	{r4, r7, pc}
 8001332:	bf00      	nop

08001334 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001342:	60da      	str	r2, [r3, #12]
}
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop

08001350 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	7b5b      	ldrb	r3, [r3, #13]
 800135c:	f083 0301 	eor.w	r3, r3, #1
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00f      	beq.n	8001386 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	7b1b      	ldrb	r3, [r3, #12]
 800136e:	4610      	mov	r0, r2
 8001370:	4619      	mov	r1, r3
 8001372:	f7ff fd1b 	bl	8000dac <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff ffda 	bl	8001334 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6819      	ldr	r1, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	7c1a      	ldrb	r2, [r3, #16]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3304      	adds	r3, #4
 80013a4:	4608      	mov	r0, r1
 80013a6:	4611      	mov	r1, r2
 80013a8:	461a      	mov	r2, r3
 80013aa:	f7fe fffd 	bl	80003a8 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6819      	ldr	r1, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	7c1a      	ldrb	r2, [r3, #16]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	7c5b      	ldrb	r3, [r3, #17]
 80013ba:	4608      	mov	r0, r1
 80013bc:	4611      	mov	r1, r2
 80013be:	461a      	mov	r2, r3
 80013c0:	f7ff fda0 	bl	8000f04 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop

080013d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ec:	4013      	ands	r3, r2
 80013ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80013f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001400:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8001402:	4a04      	ldr	r2, [pc, #16]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	60d3      	str	r3, [r2, #12]
}
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 800141e:	2001      	movs	r0, #1
 8001420:	f7ff ffd6 	bl	80013d0 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001424:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <SystemCoreSetup+0x94>)
 8001428:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <SystemCoreSetup+0x98>)
 800142a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800142c:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001430:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8001432:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <SystemCoreSetup+0x94>)
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <SystemCoreSetup+0x94>)
 8001436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800143e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8001442:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <SystemCoreSetup+0x9c>)
 8001444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001448:	3314      	adds	r3, #20
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f023 030f 	bic.w	r3, r3, #15
 8001454:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f043 0303 	orr.w	r3, r3, #3
 800145c:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <SystemCoreSetup+0x9c>)
 8001460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001464:	3314      	adds	r3, #20
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 800146a:	4a10      	ldr	r2, [pc, #64]	; (80014ac <SystemCoreSetup+0x94>)
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <SystemCoreSetup+0x94>)
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	f023 0310 	bic.w	r3, r3, #16
 8001474:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8001476:	4a0d      	ldr	r2, [pc, #52]	; (80014ac <SystemCoreSetup+0x94>)
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <SystemCoreSetup+0x94>)
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	f023 0308 	bic.w	r3, r3, #8
 8001480:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <SystemCoreSetup+0x94>)
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <SystemCoreSetup+0x94>)
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800148c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 800148e:	4a07      	ldr	r2, [pc, #28]	; (80014ac <SystemCoreSetup+0x94>)
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <SystemCoreSetup+0x94>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001498:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 800149a:	4a04      	ldr	r2, [pc, #16]	; (80014ac <SystemCoreSetup+0x94>)
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <SystemCoreSetup+0x94>)
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a4:	6253      	str	r3, [r2, #36]	; 0x24
}
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	e000ed00 	.word	0xe000ed00
 80014b0:	08000000 	.word	0x08000000
 80014b4:	58001000 	.word	0x58001000

080014b8 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 80014c0:	2300      	movs	r3, #0
 80014c2:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]

  return (status);
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 80014dc:	4b02      	ldr	r3, [pc, #8]	; (80014e8 <OSCHP_GetFrequency+0x10>)
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	00b71b00 	.word	0x00b71b00

080014ec <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80014ec:	b5b0      	push	{r4, r5, r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <SystemCoreClockSetup+0x50>)
 80014f4:	1d3c      	adds	r4, r7, #4
 80014f6:	461d      	mov	r5, r3
 80014f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014fc:	682b      	ldr	r3, [r5, #0]
 80014fe:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f83e 	bl	8000584 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8001508:	2000      	movs	r0, #0
 800150a:	f7ff f929 	bl	8000760 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 800150e:	2000      	movs	r0, #0
 8001510:	f7ff f8de 	bl	80006d0 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8001514:	2004      	movs	r0, #4
 8001516:	f7ff f9af 	bl	8000878 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 800151a:	2001      	movs	r0, #1
 800151c:	2120      	movs	r1, #32
 800151e:	f7ff f9f7 	bl	8000910 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8001522:	2000      	movs	r0, #0
 8001524:	f7ff f8e8 	bl	80006f8 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8001528:	2001      	movs	r0, #1
 800152a:	f7ff f9cd 	bl	80008c8 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 800152e:	2001      	movs	r0, #1
 8001530:	f7ff f9b6 	bl	80008a0 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bdb0      	pop	{r4, r5, r7, pc}
 800153a:	bf00      	nop
 800153c:	0800179c 	.word	0x0800179c

08001540 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8001546:	2300      	movs	r3, #0
 8001548:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 800154a:	481d      	ldr	r0, [pc, #116]	; (80015c0 <DAVE_Init+0x80>)
 800154c:	f7ff ffb4 	bl	80014b8 <CLOCK_XMC4_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d104      	bne.n	8001564 <DAVE_Init+0x24>
  {
	 /**  Initialization of DIGITAL_IO APP instance BTN1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BTN1); 
 800155a:	481a      	ldr	r0, [pc, #104]	; (80015c4 <DAVE_Init+0x84>)
 800155c:	f7ff ff18 	bl	8001390 <DIGITAL_IO_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d104      	bne.n	8001574 <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance BTN2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BTN2); 
 800156a:	4817      	ldr	r0, [pc, #92]	; (80015c8 <DAVE_Init+0x88>)
 800156c:	f7ff ff10 	bl	8001390 <DIGITAL_IO_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d104      	bne.n	8001584 <DAVE_Init+0x44>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED1); 
 800157a:	4814      	ldr	r0, [pc, #80]	; (80015cc <DAVE_Init+0x8c>)
 800157c:	f7ff ff08 	bl	8001390 <DIGITAL_IO_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d104      	bne.n	8001594 <DAVE_Init+0x54>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED2); 
 800158a:	4811      	ldr	r0, [pc, #68]	; (80015d0 <DAVE_Init+0x90>)
 800158c:	f7ff ff00 	bl	8001390 <DIGITAL_IO_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d104      	bne.n	80015a4 <DAVE_Init+0x64>
  {
	 /**  Initialization of INTERRUPT APP instance LED1_INT */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&LED1_INT); 
 800159a:	480e      	ldr	r0, [pc, #56]	; (80015d4 <DAVE_Init+0x94>)
 800159c:	f7ff fea4 	bl	80012e8 <INTERRUPT_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d104      	bne.n	80015b4 <DAVE_Init+0x74>
  {
	 /**  Initialization of PWM APP instance PWM_0 */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_0); 
 80015aa:	480b      	ldr	r0, [pc, #44]	; (80015d8 <DAVE_Init+0x98>)
 80015ac:	f7ff fde2 	bl	8001174 <PWM_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 80015b4:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000044 	.word	0x20000044
 80015c4:	0800174c 	.word	0x0800174c
 80015c8:	08001760 	.word	0x08001760
 80015cc:	08001774 	.word	0x08001774
 80015d0:	08001788 	.word	0x08001788
 80015d4:	08001748 	.word	0x08001748
 80015d8:	20000000 	.word	0x20000000

080015dc <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 80015e8:	78fb      	ldrb	r3, [r7, #3]
 80015ea:	2201      	movs	r2, #1
 80015ec:	409a      	lsls	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	605a      	str	r2, [r3, #4]
}
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800160e:	409a      	lsls	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	605a      	str	r2, [r3, #4]
}
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop

08001620 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001630:	78fb      	ldrb	r3, [r7, #3]
 8001632:	fa22 f303 	lsr.w	r3, r2, r3
 8001636:	f003 0301 	and.w	r3, r3, #1
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop

08001648 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7c1b      	ldrb	r3, [r3, #16]
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	f7ff ffbe 	bl	80015dc <XMC_GPIO_SetOutputHigh>
}
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop

08001668 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7c1b      	ldrb	r3, [r3, #16]
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f7ff ffbe 	bl	80015fc <XMC_GPIO_SetOutputLow>
}
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop

08001688 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	7c1b      	ldrb	r3, [r3, #16]
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff ffc0 	bl	8001620 <XMC_GPIO_GetInput>
 80016a0:	4603      	mov	r3, r0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop

080016ac <main>:
 * invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder for user application
 * code.
 */

int main(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 80016b2:	f7ff ff45 	bl	8001540 <DAVE_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]

  if(status != DAVE_STATUS_SUCCESS)
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d000      	beq.n	80016c2 <main+0x16>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 80016c0:	e7fe      	b.n	80016c0 <main+0x14>

  uint32_t BTN2_status;

  while(1U)
  {
	  BTN2_status = DIGITAL_IO_GetInput(&BTN2);
 80016c2:	4807      	ldr	r0, [pc, #28]	; (80016e0 <main+0x34>)
 80016c4:	f7ff ffe0 	bl	8001688 <DIGITAL_IO_GetInput>
 80016c8:	6038      	str	r0, [r7, #0]
	  if(BTN2_status != 0)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <main+0x2c>
	  {
		  DIGITAL_IO_SetOutputLow(&LED2);
 80016d0:	4804      	ldr	r0, [pc, #16]	; (80016e4 <main+0x38>)
 80016d2:	f7ff ffc9 	bl	8001668 <DIGITAL_IO_SetOutputLow>
 80016d6:	e002      	b.n	80016de <main+0x32>
	  }
	  else
	  {
		  DIGITAL_IO_SetOutputHigh(&LED2);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <main+0x38>)
 80016da:	f7ff ffb5 	bl	8001648 <DIGITAL_IO_SetOutputHigh>
	  }


  }
 80016de:	e7f0      	b.n	80016c2 <main+0x16>
 80016e0:	08001760 	.word	0x08001760
 80016e4:	08001788 	.word	0x08001788

080016e8 <__libc_init_array>:
 80016e8:	b570      	push	{r4, r5, r6, lr}
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <__libc_init_array+0x3c>)
 80016ec:	4c0e      	ldr	r4, [pc, #56]	; (8001728 <__libc_init_array+0x40>)
 80016ee:	1ae4      	subs	r4, r4, r3
 80016f0:	10a4      	asrs	r4, r4, #2
 80016f2:	2500      	movs	r5, #0
 80016f4:	461e      	mov	r6, r3
 80016f6:	42a5      	cmp	r5, r4
 80016f8:	d004      	beq.n	8001704 <__libc_init_array+0x1c>
 80016fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016fe:	4798      	blx	r3
 8001700:	3501      	adds	r5, #1
 8001702:	e7f8      	b.n	80016f6 <__libc_init_array+0xe>
 8001704:	f7ff fc20 	bl	8000f48 <_init>
 8001708:	4c08      	ldr	r4, [pc, #32]	; (800172c <__libc_init_array+0x44>)
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <__libc_init_array+0x48>)
 800170c:	1ae4      	subs	r4, r4, r3
 800170e:	10a4      	asrs	r4, r4, #2
 8001710:	2500      	movs	r5, #0
 8001712:	461e      	mov	r6, r3
 8001714:	42a5      	cmp	r5, r4
 8001716:	d004      	beq.n	8001722 <__libc_init_array+0x3a>
 8001718:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800171c:	4798      	blx	r3
 800171e:	3501      	adds	r5, #1
 8001720:	e7f8      	b.n	8001714 <__libc_init_array+0x2c>
 8001722:	bd70      	pop	{r4, r5, r6, pc}
 8001724:	20000044 	.word	0x20000044
 8001728:	20000044 	.word	0x20000044
 800172c:	20000044 	.word	0x20000044
 8001730:	20000044 	.word	0x20000044

08001734 <PWM_0_compare_config>:
 8001734:	00000000 0000000b                       ........

0800173c <PWM_0_gpio_out_config>:
 800173c:	00000098 00010000 00000004              ............

08001748 <LED1_INT>:
 8001748:	00003f40                                @?..

0800174c <BTN1>:
 800174c:	48028500 00000000 00000000 00000000     ...H............
 800175c:	00000002                                ....

08001760 <BTN2>:
 8001760:	48028100 00000000 00000000 00000000     ...H............
 8001770:	0000000f                                ....

08001774 <LED1>:
 8001774:	48028500 00000080 00010000 00000000     ...H............
 8001784:	00000007                                ....

08001788 <LED2>:
 8001788:	48028100 00000080 00010000 00000000     ...H............
 8001798:	00000000 01040250 00010000 00000000     ....P...........
 80017a8:	00010000 01010101                       ........
