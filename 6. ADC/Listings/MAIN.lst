C166 COMPILER V7.57.0, MAIN                                                                12/04/2019 12:51:43 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\MAIN.obj
COMPILER INVOKED BY: C:\Keil_v5\C166\BIN\C166.EXE MAIN.c MODV2 BROWSE MODV2 DEBUG PRINT(.\Listings\MAIN.lst) TABS(2) OBJ
                    -ECT(.\Objects\MAIN.obj) 

 stmt lvl     source

    1         //****************************************************************************
    2         // @Module        Project Settings
    3         // @Filename      MAIN.c
    4         // @Project       DAVE-ADC.dav
    5         //----------------------------------------------------------------------------
    6         // @Controller    Infineon XE169FH-200F100
    7         //
    8         // @Compiler      Keil
    9         //
   10         // @Codegenerator 2.1
   11         //
   12         // @Description   This file contains the project initialization function.
   13         //
   14         //----------------------------------------------------------------------------
   15         // @Date          04.12.2019 12:51:07
   16         //
   17         //****************************************************************************
   18         
   19         // USER CODE BEGIN (MAIN_General,1)
   20         
   21         // USER CODE END
   22         
   23         
   24         
   25         //****************************************************************************
   26         // @Project Includes
   27         //****************************************************************************
   28         
   29         #include "MAIN.h"
   30         
   31         // USER CODE BEGIN (MAIN_General,2)
   32         
   33         // USER CODE END
   34         
   35         
   36         //****************************************************************************
   37         // @Macros
   38         //****************************************************************************
   39         
   40         // USER CODE BEGIN (MAIN_General,3)
   41         
   42         // USER CODE END
   43         
   44         
   45         //****************************************************************************
   46         // @Defines
   47         //****************************************************************************
   48         
   49         // USER CODE BEGIN (MAIN_General,4)
   50           #define LCD_RS  P3_OUT_P3
   51           #define LCD_RW  P3_OUT_P4
   52           #define LCD_E P3_OUT_P5
   53           #define LCD_D P9_OUT
   54         // USER CODE END
C166 COMPILER V7.57.0, MAIN                                                                12/04/2019 12:51:43 PAGE 2   

   55         
   56         
   57         //****************************************************************************
   58         // @Typedefs
   59         //****************************************************************************
   60         
   61         // USER CODE BEGIN (MAIN_General,5)
   62         
   63         // USER CODE END
   64         
   65         
   66         //****************************************************************************
   67         // @Imported Global Variables
   68         //****************************************************************************
   69         
   70         // USER CODE BEGIN (MAIN_General,6)
   71         
   72         // USER CODE END
   73         
   74         
   75         //****************************************************************************
   76         // @Global Variables
   77         //****************************************************************************
   78         
   79         // USER CODE BEGIN (MAIN_General,7)
   80         int global_Timer100ns = 0;
   81         int global_Timer50us = 0;
   82         // USER CODE END
   83         
   84         
   85         //****************************************************************************
   86         // @External Prototypes
   87         //****************************************************************************
   88         
   89         // USER CODE BEGIN (MAIN_General,8)
   90         
   91         // USER CODE END
   92         
   93         
   94         //****************************************************************************
   95         // @Prototypes Of Local Functions
   96         //****************************************************************************
   97         
   98         // USER CODE BEGIN (MAIN_General,9)
   99         
  100         // USER CODE END
  101         
  102         
  103         //****************************************************************************
  104         // @Function      void MAIN_vInit(void) 
  105         //
  106         //----------------------------------------------------------------------------
  107         // @Description   This function initializes the microcontroller.
  108         //
  109         //----------------------------------------------------------------------------
  110         // @Returnvalue   None
  111         //
  112         //----------------------------------------------------------------------------
  113         // @Parameters    None
  114         //
  115         //----------------------------------------------------------------------------
  116         // @Date          04.12.2019
C166 COMPILER V7.57.0, MAIN                                                                12/04/2019 12:51:43 PAGE 3   

  117         //
  118         //****************************************************************************
  119         
  120         // USER CODE BEGIN (Init,1)
  121         
  122         // USER CODE END
  123         
  124         void MAIN_vInit(void)
  125         {
  126  1        // USER CODE BEGIN (Init,2)
  127  1      
  128  1        // USER CODE END
  129  1      
  130  1        //   globally disable interrupts
  131  1        PSW_IEN        =  0;          
  132  1      
  133  1      
  134  1        ///  -----------------------------------------------------------------------
  135  1        ///  Configuration of the System Clock:
  136  1        ///  -----------------------------------------------------------------------
  137  1        ///  - VCO clock used, input clock is connected
  138  1        ///  - input frequency is 8,00 MHz
  139  1        ///  - system clock is 100.00 MHz
  140  1      
  141  1        MAIN_vUnlockProtecReg();     // unlock write security
  142  1      
  143  1        MAIN_vChangeFreq();          // load PLL control register
  144  1      
  145  1        //   -----------------------------------------------------------------------
  146  1        //   SCU Interrupt Disable configuration:
  147  1        //   -----------------------------------------------------------------------
  148  1        SCU_INTDIS     =  0xFFFF;      // SCU Interrupt Disable Register
  149  1      
  150  1        //   -----------------------------------------------------------------------
  151  1        //   Initialization of the Peripherals:
  152  1        //   -----------------------------------------------------------------------
  153  1      
  154  1        //   initializes the Parallel Ports
  155  1        IO_vInit();
  156  1      
  157  1        //   initializes the General Purpose Timer Unit (GPT1)
  158  1        GPT1_vInit();
  159  1      
  160  1        //   initializes the General Purpose Timer Unit (GPT2)
  161  1        GPT2_vInit();
  162  1      
  163  1        //   initializes the Analog / Digital Converter  (ADC0)
  164  1        ADC0_vInit();
  165  1      
  166  1      
  167  1        //   -----------------------------------------------------------------------
  168  1        //   Initialization of the Bank Select registers:
  169  1        //   -----------------------------------------------------------------------
  170  1      
  171  1      
  172  1        //   -----------------------------------------------------------------------
  173  1        //   SCU Interrupt Source Selection configuration:
  174  1        //   -----------------------------------------------------------------------
  175  1        SCU_ISSR       =  0x0000;      // SCU Interrupt Source Select Register
  176  1      
  177  1        SCU_ISSR1      =  0x0000;      // SCU Interrupt Source Select 1 Register
  178  1      
C166 COMPILER V7.57.0, MAIN                                                                12/04/2019 12:51:43 PAGE 4   

  179  1        SCU_ISSR2      =  0x0000;      // SCU Interrupt Source Select 2 Register
  180  1      
  181  1        // USER CODE BEGIN (Init,3)
  182  1      
  183  1        // USER CODE END
  184  1      
  185  1        MAIN_vLockProtecReg();       // lock write security
  186  1      
  187  1        //   globally enable interrupts
  188  1        PSW_IEN        =  1;          
  189  1      
  190  1      } //  End of function MAIN_vInit
  191         
  192         
  193         //****************************************************************************
  194         // @Function      void MAIN_vUnlockProtecReg(void) 
  195         //
  196         //----------------------------------------------------------------------------
  197         // @Description   This function makes it possible to write one protected 
  198         //                register.
  199         //
  200         //----------------------------------------------------------------------------
  201         // @Returnvalue   None
  202         //
  203         //----------------------------------------------------------------------------
  204         // @Parameters    None
  205         //
  206         //----------------------------------------------------------------------------
  207         // @Date          04.12.2019
  208         //
  209         //****************************************************************************
  210         
  211         // USER CODE BEGIN (UnlockProtecReg,1)
  212         
  213         // USER CODE END
  214         
  215         void MAIN_vUnlockProtecReg(void)
  216         {
  217  1        uword uwPASSWORD;
  218  1      
  219  1          SCU_SLC = 0xAAAA;                   // command 0
  220  1          SCU_SLC = 0x5554;                   // command 1
  221  1      
  222  1          uwPASSWORD = SCU_SLS & 0x00FF;
  223  1          uwPASSWORD = (~uwPASSWORD) & 0x00FF;
  224  1      
  225  1          SCU_SLC = 0x9600 | uwPASSWORD;      // command 2
  226  1          SCU_SLC = 0x0000;                   // command 3
  227  1      
  228  1      } //  End of function MAIN_vUnlockProtecReg
  229         
  230         
  231         //****************************************************************************
  232         // @Function      void MAIN_vLockProtecReg(void) 
  233         //
  234         //----------------------------------------------------------------------------
  235         // @Description   This function makes it possible to lock one protected 
  236         //                register.
  237         //
  238         //----------------------------------------------------------------------------
  239         // @Returnvalue   None
  240         //
C166 COMPILER V7.57.0, MAIN                                                                12/04/2019 12:51:43 PAGE 5   

  241         //----------------------------------------------------------------------------
  242         // @Parameters    None
  243         //
  244         //----------------------------------------------------------------------------
  245         // @Date          04.12.2019
  246         //
  247         //****************************************************************************
  248         
  249         // USER CODE BEGIN (LockProtecReg,1)
  250         
  251         // USER CODE END
  252         
  253         void MAIN_vLockProtecReg(void)
  254         {
  255  1        uword uwPASSWORD;
  256  1      
  257  1          SCU_SLC = 0xAAAA;                   // command 0
  258  1          SCU_SLC = 0x5554;                   // command 1
  259  1      
  260  1          uwPASSWORD = SCU_SLS & 0x00FF;
  261  1          uwPASSWORD = (~uwPASSWORD) & 0x00FF;
  262  1      
  263  1          SCU_SLC = 0x9600 | uwPASSWORD;      // command 2
  264  1          SCU_SLC = 0x1800;                   // command 3; new PASSWOR is 0x00
  265  1      
  266  1          uwPASSWORD = SCU_SLS & 0x00FF;
  267  1          uwPASSWORD = (~uwPASSWORD) & 0x00FF;
  268  1          SCU_SLC = 0x8E00 | uwPASSWORD;      // command 4
  269  1      
  270  1      } //  End of function MAIN_vLockProtecReg
  271         
  272         
  273         //****************************************************************************
  274         // @Function      void MAIN_vChangeFreq(void) 
  275         //
  276         //----------------------------------------------------------------------------
  277         // @Description   This function is used to select the external crystal and
  278         //                configure the system frequency to 100MHz/80MHz/66MHz.
  279         //
  280         //----------------------------------------------------------------------------
  281         // @Returnvalue   None
  282         //
  283         //----------------------------------------------------------------------------
  284         // @Parameters    None
  285         //
  286         //----------------------------------------------------------------------------
  287         // @Date          04.12.2019
  288         //
  289         //****************************************************************************
  290         
  291         // USER CODE BEGIN (ChangeFreq,1)
  292         
  293         // USER CODE END
  294         
  295         void MAIN_vChangeFreq(void)
  296         {
  297  1        Scs_ErrorType Error;
  298  1      
  299  1        Scs_EnableHighPrecOsc(1U);
  300  1      
  301  1        //For application and internal application resets, the complete PLL configuration could be avoided
  302  1        //The entry from application resets and internal application reset is covered in the following different
C166 COMPILER V7.57.0, MAIN                                                                12/04/2019 12:51:43 PAGE 6   

             -iation
  303  1        //in int/ext clock in lock/unlocked state.
  304  1      
  305  1        if  ((SCU_PLLSTAT & 0x0004) == 0x0004)       // fR derived from Internal clock
  306  1        {
  307  2          //Normal startup state during boot and the clock
  308  2          //has to be in the next step configured on the external crystal
  309  2          //use XTAL/VCO, count XTAL clock
  310  2      
  311  2          Scs_InitTimer();       // initialize CCU6 timer T13 for SCS driver
  312  2      
  313  2          // perform transition from base mode to normal mode, check for error
  314  2          Error = Scs_GoFromBaseModeToNormalMode();
  315  2          if(Error)
  316  2          {
  317  3            for(;;)      // this part of code should not be reached
  318  3            {
  319  4              NOP();
  320  4            }
  321  3          }
  322  2      
  323  2          if ((SCU_PLLSTAT & 0x1009) == 0x1009)      // fR derived from external crystal clock + VCO is locked
  324  2          {
  325  3            //usually after an application reset where clock need not be configured again.
  326  3            //check K2/P/N values and decide whether these values have to be adapted based on application needs.
  327  3            NOP();
  328  3            //usually the PLL losss of Lock TRAP schould be enabled here.
  329  3          }
  330  2          else       //fR derived from external crystal clock + VCO is not locked
  331  2          {
  332  3                     //estimate the K1 value and the current frequency
  333  3                     //reduce K2/P/N values in steps so that the frequency
  334  3                     //jumps is limited to 20MHz or factor of 5 whichever is minimum
  335  3            NOP();
  336  3          }
  337  2      
  338  2      
  339  2        }
  340  1      
  341  1      } //  End of function MAIN_vChangeFreq
  342         
  343         
  344         //****************************************************************************
  345         // @Function      void main(void) 
  346         //
  347         //----------------------------------------------------------------------------
  348         // @Description   This is the main function.
  349         //
  350         //----------------------------------------------------------------------------
  351         // @Returnvalue   None
  352         //
  353         //----------------------------------------------------------------------------
  354         // @Parameters    None
  355         //
  356         //----------------------------------------------------------------------------
  357         // @Date          04.12.2019
  358         //
  359         //****************************************************************************
  360         
  361         // USER CODE BEGIN (Main,1)
  362         //wait auslegen auf 100ns
  363         void wait100ns (unsigned int runtime) {
C166 COMPILER V7.57.0, MAIN                                                                12/04/2019 12:51:43 PAGE 7   

  364  1        global_Timer100ns = 0;
  365  1        GPT12E_T5CON_T5R = 1; //reset Timer6
  366  1        while(global_Timer100ns < runtime) {
  367  2          //wait till interupt is executed as often as runtime whises
  368  2        }
  369  1      }
  370         
  371         void wait50us (unsigned int runtime) {
  372  1        global_Timer50us = 0;
  373  1        GPT12E_T6CON_T6R = 1; //reset Timer6
  374  1        while(global_Timer50us < runtime) {
  375  2          //wait till interupt is executed as often as runtime whises
  376  2        }
  377  1      }
  378         
  379         
  380         
  381         void LCDcommand (unsigned int com) {
  382  1        //function set
  383  1        LCD_RS = 0;
  384  1        LCD_RW = 0;
  385  1        //1x wait = 100ns => 100ns + 10ns just to be save
  386  1        wait100ns(1);
  387  1        NOP();
  388  1        LCD_E = 1;
  389  1        //30ns
  390  1        NOP();
  391  1        NOP();
  392  1        NOP();
  393  1        //insert command
  394  1        LCD_D  = com;
  395  1        //wait Enable pulse width (300ns)
  396  1        wait100ns(3);
  397  1        LCD_E = 0;
  398  1        //wait read data hold time 10ns +10ns safety
  399  1        NOP();
  400  1        NOP();
  401  1      }
  402         
  403         void LCDdata (unsigned int data) {
  404  1        //function set
  405  1        LCD_RS = 1;
  406  1        LCD_RW = 0;
  407  1        //1x wait = 100ns => 100ns + 10ns just to be save
  408  1        wait100ns(1);
  409  1        NOP();
  410  1        LCD_E = 1;
  411  1        //30ns
  412  1        NOP();
  413  1        NOP();
  414  1        NOP();
  415  1        //insert command
  416  1        LCD_D  = data;
  417  1        //wait Enable pulse width (300ns)
  418  1        wait100ns(3);
  419  1        LCD_E = 0;
  420  1        //wait read data hold time 10ns +10ns safety
  421  1        NOP();
  422  1        NOP();
  423  1        wait50us(1);
  424  1      }
  425         // USER CODE END
C166 COMPILER V7.57.0, MAIN                                                                12/04/2019 12:51:43 PAGE 8   

  426         
  427         void main(void)
  428         {
  429  1        // USER CODE BEGIN (Main,2)
  430  1      
  431  1        // USER CODE END
  432  1      
  433  1        MAIN_vInit();
  434  1      
  435  1        // USER CODE BEGIN (Main,3)
  436  1        
  437  1        //function set 0011 1111
  438  1        LCDcommand(0x3F);
  439  1        //execution time 39us => wait 50us
  440  1        wait50us(1);
  441  1        
  442  1        //Display OnOff Control 0000 1111 (1 + Display on + Curser on + cBlink on)
  443  1        LCDcommand(0x0F);
  444  1        //no wait needed
  445  1        
  446  1        //Clear Display 
  447  1        LCDcommand(0x01);
  448  1        //wait execution time 1,53ms = 1,53 * 1000 = 1530
  449  1        wait50us(1550/50);
  450  1        
  451  1        
  452  1        //write Hallo!
  453  1        LCDdata(0x48);
  454  1        LCDdata(0x61);
  455  1        LCDdata(0x6c);
  456  1        LCDdata(0x6c);
  457  1        LCDdata(0x6f);
  458  1        LCDdata(0x21);
  459  1        
  460  1        //next line 1100 0000 (0x40 = 2nd line, 0x80 = set DDRAM address)
  461  1        LCDcommand(0xC0);
  462  1        wait50us(1);
  463  1        
  464  1      
  465  1        
  466  1        
  467  1        // USER CODE END
  468  1      
  469  1        while(1)
  470  1        {
  471  2      
  472  2         // USER CODE BEGIN (Main,4)
  473  2        wait50us(500);
  474  2        P10_OUT_P0 = ~P10_OUT_P0;
  475  2        
  476  2        //TODO Timer 6/7 einstellen auf 100ns/50us
  477  2         // USER CODE END
  478  2      
  479  2        }
  480  1      
  481  1      } //  End of function main
  482         
  483         
  484         
  485         // USER CODE BEGIN (MAIN_General,10)
  486         
  487         // USER CODE END
C166 COMPILER V7.57.0, MAIN                                                                12/04/2019 12:51:43 PAGE 9   

  488         
  489         


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         412     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =           4     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =          12     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
