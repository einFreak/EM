C166 COMPILER V7.57.0, BLINKCODE                                                           10/23/2019 12:59:42 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE BLINKCODE
OBJECT MODULE PLACED IN .\Objects\BlinkCode.obj
COMPILER INVOKED BY: C:\Keil_v5\C166\BIN\C166.EXE BlinkCode.c MODV2 BROWSE MODV2 DEBUG PRINT(.\Listings\BlinkCode.lst) T
                    -ABS(2) OBJECT(.\Objects\BlinkCode.obj) 

 stmt lvl     source

    1         // File: Blinken.c - Blinken einer DIODE
    2         //
    3         // XE167.h muss eingebunden werden, weil dann die symbolischen
    4         // Namen wie z.B. P10_OUT_P0 verwendet werden können und nicht
    5         // Adresse von P10_OUT_P0 verwendet werden muss!
    6         //
    7         #include <XE167F.h>
    8         volatile unsigned int counter1,counter2;
    9         // Funktion wait() braucht ~1 sek.
   10         
   11         typedef unsigned int uword;
   12         void MAIN_vUnlockProtecReg(void)
   13         {
   14  1        uword uwPASSWORD;
   15  1        SCU_SLC = 0xAAAA; // command 0
   16  1        SCU_SLC = 0x5554; // command 1
   17  1        uwPASSWORD = SCU_SLS & 0x00FF;
   18  1        uwPASSWORD = (~uwPASSWORD) & 0x00FF;
   19  1        SCU_SLC = 0x9600 | uwPASSWORD; // command 2
   20  1        SCU_SLC = 0x0000; // command 3
   21  1      }
   22         
   23         void MAIN_vLockProtecReg(void)
   24         {
   25  1        uword uwPASSWORD;
   26  1        SCU_SLC = 0xAAAA; // command 0
   27  1        SCU_SLC = 0x5554; // command 1
   28  1        uwPASSWORD = SCU_SLS & 0x00FF;
   29  1        uwPASSWORD = (~uwPASSWORD) & 0x00FF;
   30  1        SCU_SLC = 0x9600 | uwPASSWORD; // command 2
   31  1        SCU_SLC = 0x1800; // command 3; new PASSWOR is 0x00
   32  1        uwPASSWORD = SCU_SLS & 0x00FF;
   33  1        uwPASSWORD = (~uwPASSWORD) & 0x00FF;
   34  1        SCU_SLC = 0x8E00 | uwPASSWORD; // command 4
   35  1      }
   36         
   37         
   38         void wait()
   39         {
   40  1        counter1 = 0x40*0.15;
   41  1        while (counter1 > 0)
   42  1        {
   43  2          counter1--;
   44  2          counter2 = 0xFFFF;
   45  2          while (counter2 > 0)
   46  2          {
   47  3          counter2--;
   48  3          }
   49  2        }
   50  1      }
   51         
   52         void led0 () {P10_OUT_P0 = ~P10_OUT_P0;}
   53         void led1 () {P10_OUT_P1 = ~P10_OUT_P1;}
   54         void led2 () {P10_OUT_P2 = ~P10_OUT_P2;}
C166 COMPILER V7.57.0, BLINKCODE                                                           10/23/2019 12:59:42 PAGE 2   

   55         void led3 () {P10_OUT_P3 = ~P10_OUT_P3;}
   56         void led4 () {P10_OUT_P4 = ~P10_OUT_P4;}
   57         void led5 () {P10_OUT_P5 = ~P10_OUT_P5;}
   58         void led6 () {P10_OUT_P6 = ~P10_OUT_P6;}
   59         void led7 () {P10_OUT_P7 = ~P10_OUT_P7;}
   60         
   61         int glob_wait = 0;
   62         
   63         void GPT2_viT6(void) interrupt 0x24 // Interrupt von Timer6
   64         {
   65  1        led0();
   66  1        glob_wait = ~glob_wait;
   67  1      }
   68         
   69         void wait_try(void) {
   70  1        if(glob_wait == 0)
   71  1          while(glob_wait==0);
   72  1        if(glob_wait == 1)
   73  1          while(glob_wait==1);
   74  1      }
   75         
   76         void ledaus () {
   77  1        P10_OUT = 0xFFFF;
   78  1      }
   79         
   80         
   81         //Working
   82         void blinkrb() {
   83  1        int mask  = 0xFFFF;
   84  1        int blink = 0x0001;
   85  1        int i;
   86  1        
   87  1        ledaus();
   88  1        P10_OUT = mask ^ blink;
   89  1        wait();
   90  1        for (i=0; i < 8; i++)
   91  1        {
   92  2          blink = blink<<1;
   93  2          P10_OUT = mask ^ blink;
   94  2          wait();
   95  2        }
   96  1        ledaus();
   97  1      } 
   98         
   99         //TODO
  100         void blinklb() {
  101  1        int i;
  102  1        int mask = 0xFFFF;
  103  1        int blink = 0x0080;
  104  1        
  105  1        ledaus();
  106  1        P10_OUT = mask ^ blink;
  107  1        wait();
  108  1        for (i=0; i < 8; i++)
  109  1        {
  110  2          blink = blink/2;
  111  2          //blink = blink>>1;
  112  2          P10_OUT = mask ^ blink;
  113  2          wait();
  114  2        }
  115  1        ledaus();
  116  1      }
C166 COMPILER V7.57.0, BLINKCODE                                                           10/23/2019 12:59:42 PAGE 3   

  117         
  118         //von Außen nach Mitte und wieder raus
  119         void blinkmb() {
  120  1        int mask = 0xFFFF;
  121  1        ledaus();
  122  1        wait();
  123  1        P10_OUT = mask ^ 0x0081;
  124  1        wait();
  125  1        P10_OUT = mask ^ 0x0042;
  126  1        wait();
  127  1        P10_OUT = mask ^ 0x0024;
  128  1        wait();
  129  1        P10_OUT = mask ^ 0x0018;
  130  1        wait();
  131  1        P10_OUT = mask ^ 0x0024;
  132  1        wait();
  133  1        P10_OUT = mask ^ 0x0042;
  134  1        wait();
  135  1        P10_OUT = mask ^ 0x0081;
  136  1        wait();
  137  1        ledaus();
  138  1      }
  139         
  140         
  141         
  142         
  143         void main(void)
  144         {
  145  1      
  146  1      // Initialize IO
  147  1      // Pin 0-7 von Port 10 auf "OUT"
  148  1      P10_IOCR00 = 0x0080;
  149  1      P10_IOCR01 = 0x0080;
  150  1      P10_IOCR02 = 0x0080;
  151  1      P10_IOCR03 = 0x0080;
  152  1      P10_IOCR04 = 0x0080;
  153  1      P10_IOCR05 = 0x0080;
  154  1      P10_IOCR06 = 0x0080;
  155  1      P10_IOCR07 = 0x0080;
  156  1      
  157  1      //Pin 2-5 von Port 4 auf "IN"
  158  1      P4_IOCR02  = 0x0020;
  159  1      P4_IOCR03  = 0x0020;
  160  1      P4_IOCR04  = 0x0020;
  161  1      P4_IOCR05  = 0x0020;
  162  1      
  163  1      MAIN_vUnlockProtecReg();
  164  1        GPT12E_KSCCFG = 3;
  165  1        CC2_KSCCFG = 3;
  166  1      MAIN_vLockProtecReg();
  167  1        
  168  1      
  169  1      //1001 0000 1100 0111
  170  1      GPT12E_T6CON  = 0x90C7;
  171  1      GPT12E_CAPREL = 0x2000;
  172  1      GPT12E_T6IC   = 0x0050;
  173  1      PSW_IEN = 1;
  174  1      
  175  1      ledaus();
  176  1      // Wichtig: einfügen einer „Endlosschleife“
  177  1      
  178  1      while (1) {
C166 COMPILER V7.57.0, BLINKCODE                                                           10/23/2019 12:59:42 PAGE 4   

  179  2      
  180  2        //ledaus();
  181  2        if (P4_IN_P2) blinkrb();
  182  2        if (P4_IN_P3) blinklb();
  183  2        if (P4_IN_P4) blinkmb();
  184  2      
  185  2      }
  186  1      }


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         502     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =           6     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =           6     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
